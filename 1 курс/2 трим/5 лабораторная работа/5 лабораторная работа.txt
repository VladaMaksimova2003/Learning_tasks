#include <iostream>
#include <fstream>
#include <sstream>
#include <deque>
#include <vector>
#include <set>
#include <map>
#include <iterator>
#include <algorithm>
#include <windows.h>
//1.Сформировать случайным образом дек из 20 элементов от 1 до 100. Вывести его на экран.
//Отсортировать элементы вектора по возрастанию первой цифры.Снова вывести вектор на экран.
//Для сортировки использовать предикаты!
//2. Считать из двух текстовых файлов три множества идентификаторов(set1, set2 и set3).
//Сформировать их пересечение.Вывести результат на экран.Обязательно использовать алгоритмы работы  с множествами!
//3. Создать с помощью контейнера map список абитуриентов(фамилия - сумма баллов).
//Данные считывать из текстового файла.Вывести на экран весь список.Вывести оценку указанного студента(по фамилии).
//Удалить из списка данного студента и снова вывести список на экран.

using namespace std;

	template <typename T>
	void Display_Contents(vector<T>& Input) {
		for (auto it = Input.begin(); it != Input.end(); ++it)
			cout << *it << " ";
		cout << endl;
	}
	template <typename T>
	void Display_Contents(deque<T>& Input) {
		for (auto it = Input.begin(); it != Input.end(); ++it)
			cout << *it << " ";
		cout << endl;
	}
	template <typename T>
	void Display_Contents(set<T>& Input) {
		for (auto it = Input.begin(); it != Input.end(); ++it)
			cout << *it << " ";
		cout << endl;
	}
	template <typename Key, typename Val>
	void Display_Contents(map<Key, Val>& Input) {
		for (auto it = Input.begin(); it != Input.end(); ++it)
			cout << it->first << " " << it->second << endl;
	}
	template <typename Key, typename Val>
	void Display_Element(map<Key, Val>& Input, Key value) {
		auto it = Input.find(value);
			cout << it->second << endl;
	}
	template <typename Key, typename Val>
	void Erase_Element(map<Key, Val>& Input, Key value) {
		auto it = Input.find(value);
		Input.erase(it);
	}
	void Get_Random_Number(deque<int>& Input, size_t N)
	{
		for (size_t i = 0; i < N; ++i) {
			int num = 1 + rand() % 100;
			Input.emplace_back(num);
		}
	}
	void Get_Random_Number(vector<int>& Input, size_t N)
	{		
		for (size_t i = 0; i < N; ++i) {
			int num = 1 + rand() % 100;
			Input.emplace_back(num);
		}
	}

	bool Display_Sort(const int& value1, const int& value2) {
		return value1 < value2;
	}

	int main() {
		SetConsoleCP(1251);
		SetConsoleOutputCP(1251);
		srand(time(NULL));
		deque <int> object1;
		vector <int> object2;
		set <int> set1, set2, set3, set;
		map <string, int> student;
		ifstream file1, file2;
		string str;
		stringstream ss;
		int value;
		size_t size;
		char key;
		while (true) {
			cout << "Выберите одно из треx заданий ";
			cin >> key;
			switch (key) {
			case '1':
				Get_Random_Number(object1, 20);
				Get_Random_Number(object2, 20);
				Display_Contents(object1);
				Display_Contents(object2);
				sort(object1.begin(), object1.end(), Display_Sort);
				sort(object2.begin(), object2.end(), Display_Sort);
				cout << "Результат после сортировки - " << endl;
				Display_Contents(object1);
				Display_Contents(object2);
				break;
			case '2':
				cout << "Введите именя для первого файла ";
				cin >> str;
				file1.open(str);
				cout << "Введите имя для второго файла ";
				cin >> str;
				file2.open(str);
				if (file1 && file2) {
					getline(file1, str);
					ss << str;
					while (ss) {
						ss >> value;
						set1.emplace(value);
					}
					ss.clear();
					getline(file1, str);
					ss << str;
					while (ss) {
						ss >> value;
						set2.emplace(value);
					}
					ss.clear();
					getline(file2, str);
					ss << str;
					while (ss) {
						ss >> value;
						set3.emplace(value);
					}
					ss.clear();
				}//заполнение из файлов
				Display_Contents(set1);
				Display_Contents(set2);
				Display_Contents(set3);
				set_intersection(set1.begin(), set1.end(), set2.begin(), set2.end(), inserter(set, set.begin()));//ищем общие элементы
				set_intersection(set.begin(), set.end(), set3.begin(), set3.end(), inserter(set, set.begin()));
				cout << "Пересечение трех множеств - ";
				Display_Contents(set);
				file1.close();
				file2.close();
				break;
			case '3':
				cout << "Введите именя для файла ";
				cin >> str;
				file1.open(str);
				if (file1) {
					while (!file1.eof()) {
						file1 >> str >> value;
						student.emplace(str, value);
					}
					Display_Contents(student);
					cout << "Введите фамилию для поиска оценки ";
					cin >> str;
					Display_Element(student, str);
					Erase_Element(student, str);
					cout << "Список после удаления студента " << endl;
					Display_Contents(student);
				}
				file1.close();
				break;
			default:
				return 0;
			}
		}
	}